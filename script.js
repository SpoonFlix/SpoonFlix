// --- Pre-built Data (Generated by build.js) ---
const moviesData = [
  {
    "id": 603,
    "title": "The Matrix",
    "overview": "Set in the 22nd century, The Matrix tells the story of a computer hacker who joins a group of underground insurgents fighting the vast and powerful computers who now rule the earth.",
    "poster_path": "/dXNAPwY7VrqMAo51EKhhCJfaGb5.jpg",
    "backdrop_path": "/icmmSD4vTTDKOq2vvdulafOGw93.jpg",
    "vote_average": 8.224,
    "release_date": "1999-03-31",
    "genres": [
      {
        "id": 28,
        "name": "Action"
      },
      {
        "id": 878,
        "name": "Science Fiction"
      }
    ],
    "type": "movie",
    "trailer_key": "d0XTFAMmhrE",
    "logo_path": "/kA8phmxG7h4BIN061fiutckq9Ho.png",
    "custom_link": "/watch/matrix-special",
    "title_image_url": "https://image.tmdb.org/t/p/original/dUPKMhCOznGgcX1k4dVrA3f05sI.png",
    "custom_trailer_url": null
  },
  {
    "id": 27205,
    "title": "Inception",
    "overview": "Cobb, a skilled thief who commits corporate espionage by infiltrating the subconscious of his targets is offered a chance to regain his old life as payment for a task considered to be impossible: \"inception\", the implantation of another person's idea into a target's subconscious.",
    "poster_path": "/ljsZTbVsrQSqZgWeep2B1QiDKuh.jpg",
    "backdrop_path": "/8ZTVqvKDQ8emSGUEMjsS4yHAwrp.jpg",
    "vote_average": 8.369,
    "release_date": "2010-07-15",
    "genres": [
      {
        "id": 28,
        "name": "Action"
      },
      {
        "id": 878,
        "name": "Science Fiction"
      },
      {
        "id": 12,
        "name": "Adventure"
      }
    ],
    "type": "movie",
    "trailer_key": "cdx31ak4KbQ",
    "logo_path": "/8ThUfwQKqcNk6fTOVaWOts3kvku.png",
    "custom_link": "/watch/inception-custom",
    "title_image_url": "https://image.tmdb.org/t/p/original/8ZTVqvKDQ8emSGUEMjsSzoWviJ7.png",
    "custom_trailer_url": "https://www.youtube.com/embed/8hP9D6kZseM"
  },
  {
    "id": 496243,
    "title": "Parasite",
    "overview": "All unemployed, Ki-taek's family takes peculiar interest in the wealthy and glamorous Parks for their livelihood until they get entangled in an unexpected incident.",
    "poster_path": "/7IiTTgloJzvGI1TAYymCfbfl3vT.jpg",
    "backdrop_path": "/hiKmpZMGZsrkA3cdce8a7Dpos1j.jpg",
    "vote_average": 8.501,
    "release_date": "2019-05-30",
    "genres": [
      {
        "id": 35,
        "name": "Comedy"
      },
      {
        "id": 53,
        "name": "Thriller"
      },
      {
        "id": 18,
        "name": "Drama"
      }
    ],
    "type": "movie",
    "trailer_key": "bM9QabAojCg",
    "logo_path": "/eEGZWCv0OYbMLCaNsDl1cgrvnWR.png",
    "custom_link": "/watch/parasite-commentary",
    "title_image_url": "https://image.tmdb.org/t/p/original/5M6zMTBu6TUAAbY3d43XEyQpOMD.png",
    "custom_trailer_url": null
  },
  {
    "id": 157336,
    "title": "Interstellar",
    "overview": "The adventures of a group of explorers who make use of a newly discovered wormhole to surpass the limitations on human space travel and conquer the vast distances involved in an interstellar voyage.",
    "poster_path": "/gEU2QniE6E77NI6lCU6MxlNBvIx.jpg",
    "backdrop_path": "/8sNiAPPYU14PUepFNeSNGUTiHW.jpg",
    "vote_average": 8.453,
    "release_date": "2014-11-05",
    "genres": [
      {
        "id": 12,
        "name": "Adventure"
      },
      {
        "id": 18,
        "name": "Drama"
      },
      {
        "id": 878,
        "name": "Science Fiction"
      }
    ],
    "type": "movie",
    "trailer_key": "LY19rHKAaAg",
    "logo_path": "/5yWlWp7Obmfn6ztpf1408JJ6L7o.png",
    "custom_link": "/watch/interstellar-extended",
    "title_image_url": null,
    "custom_trailer_url": null
  },
  {
    "id": 129,
    "title": "Spirited Away",
    "overview": "A young girl, Chihiro, becomes trapped in a strange new world of spirits. When her parents undergo a mysterious transformation, she must call upon the courage she never knew she had to free her family.",
    "poster_path": "/39wmItIWsg5sZMyRUHLkWBcuVCM.jpg",
    "backdrop_path": "/6oaL4DP75yABrd5EbC4H2zq5ghc.jpg",
    "vote_average": 8.536,
    "release_date": "2001-07-20",
    "genres": [
      {
        "id": 16,
        "name": "Animation"
      },
      {
        "id": 10751,
        "name": "Family"
      },
      {
        "id": 14,
        "name": "Fantasy"
      }
    ],
    "type": "movie",
    "trailer_key": "GAp2_0JJskk",
    "logo_path": "/hkUi1Z15Ymj9GNamWQkzUhehLuy.png",
    "custom_link": "/watch/spirited-away-hd",
    "title_image_url": null,
    "custom_trailer_url": null
  },
  {
    "id": 155,
    "title": "The Dark Knight",
    "overview": "Batman raises the stakes in his war on crime. With the help of Lt. Jim Gordon and District Attorney Harvey Dent, Batman sets out to dismantle the remaining criminal organizations that plague the streets. The partnership proves to be effective, but they soon find themselves prey to a reign of chaos unleashed by a rising criminal mastermind known to the terrified citizens of Gotham as the Joker.",
    "poster_path": "/qJ2tW6WMUDux911r6m7haRef0WH.jpg",
    "backdrop_path": "/oOv2oUXcAaNXakRqUPxYq5lJURz.jpg",
    "vote_average": 8.519,
    "release_date": "2008-07-16",
    "genres": [
      {
        "id": 18,
        "name": "Drama"
      },
      {
        "id": 28,
        "name": "Action"
      },
      {
        "id": 80,
        "name": "Crime"
      },
      {
        "id": 53,
        "name": "Thriller"
      }
    ],
    "type": "movie",
    "trailer_key": "_PZpmTj1Q8Q",
    "logo_path": "/nO5Uix3Qr4WjOyU1BMPv0okyNWm.png",
    "custom_link": "/watch/dark-knight-imax",
    "title_image_url": "https://image.tmdb.org/t/p/original/ldfNeTvQ4QcOMtE4F8qUAbdrS4A.png",
    "custom_trailer_url": null
  }
];
const showsData = [];
// --- End Pre-built Data ---

document.addEventListener('DOMContentLoaded', async () => { // Make top-level async
    // --- DOM Elements ---
    const bodyElement = document.body; // Keep body element reference
    const pageContainer = document.getElementById('page-content'); // General container for movies or shows
    const movieDetails = document.querySelector('.movie-details');
    // Modal Content Elements
    const modalBackdrop = movieDetails.querySelector('.modal-backdrop');
    const modalInfoContent = movieDetails.querySelector('.modal-info-content');
    const detailsTitle = document.getElementById('details-title');
    const detailsTitleImage = document.getElementById('details-title-image');
    const detailsDescription = document.getElementById('details-description');
    const detailsTrailer = document.getElementById('details-trailer');
    const detailsPlayButton = document.getElementById('details-play-button');
    const detailsRating = document.getElementById('details-rating');
    const detailsYear = document.getElementById('details-year');
    const detailsGenres = document.getElementById('details-genres');
    const closeDetailsButton = document.querySelector('.close-details');
    // Featured Banner Elements
    // Featured Banner Elements (Keep for potential future use on index.html, but logic will change)
    const featuredCarousel = document.querySelector('.featured-carousel');
    const featuredItemsContainer = document.querySelector('.featured-items');

    // --- Configuration (Simplified for Static Build) ---
    // No API Key needed in the browser script anymore
    const baseImageUrl = 'https://image.tmdb.org/t/p/'; // Still needed for constructing image URLs
    const posterSize = 'w342';
    const backdropSize = 'w1280';
    const titleImageSize = 'w500'; // Keep for consistency

    // --- State ---
    let currentFeaturedIndex = 0;
    // Data variables (moviesData, showsData) will be prepended by build.js

    // --- Helper Functions ---
    function getImageUrl(path, size = posterSize) {
        // Remove placeholder logic
        // Construct image URL from path and size. Path should exist in the pre-built data.
        return path ? `${baseImageUrl}${size}${path}` : null; // Return null if no path
    }

    // Remove fetchFromTMDB, fetchAllDetails, fetchVideos, fetchImages as they are done in build.js

    function copyToClipboard(text, button) {
        navigator.clipboard.writeText(text).then(() => {
            const originalText = button.textContent;
            button.textContent = 'Copied!';
            setTimeout(() => { button.textContent = originalText; }, 1500);
        }).catch(err => {
            console.error('Failed to copy text: ', err);
            alert('Failed to copy link.');
        });
    }


    // --- Modal Functions ---
    // Now takes the item directly from the pre-built static data
    function showMovieDetails(item) {
        if (!item || !item.type) {
             console.error("showMovieDetails called with invalid item:", item);
             return;
        }
        const type = item.type;
        const title = item.title || item.name;
        const releaseDate = item.release_date || item.first_air_date;
        const year = releaseDate ? new Date(releaseDate).getFullYear() : 'N/A';

        // --- Populate Backdrop/Trailer ---
        detailsTrailer.src = ''; // Clear previous trailer
        const backdropUrl = getImageUrl(item.backdrop_path, backdropSize);
        modalBackdrop.style.backgroundImage = backdropUrl ? `url(${backdropUrl})` : 'none';
        modalBackdrop.style.backgroundColor = backdropUrl ? 'transparent' : '#111';

        // Use the pre-determined trailer URL (custom or built from key)
        const trailerUrl = item.custom_trailer_url;

        if (trailerUrl) {
            detailsTrailer.src = trailerUrl;
            detailsTrailer.style.display = 'block'; // Ensure iframe is visible
        } else {
             detailsTrailer.style.display = 'none'; // Hide iframe if no trailer
        }


        // --- Populate Info Content ---
        // Title / Logo
        detailsTitle.textContent = title; // Set text title first
        detailsTitle.style.display = 'block';
        detailsTitleImage.src = ''; // Clear image src
        detailsTitleImage.style.display = 'none';

        // Use the pre-determined title image URL (custom or built from logo_path)
        // It might be a full URL or a TMDB path
        let finalLogoUrl = null;
        if (item.title_image_url) {
            if (item.title_image_url.startsWith('http')) {
                finalLogoUrl = item.title_image_url; // Use direct URL if provided
            } else {
                // Assume it's a TMDB path, construct full URL
                finalLogoUrl = getImageUrl(item.title_image_url, titleImageSize);
            }
        }

        // Display the logo if a URL exists
        if (finalLogoUrl) {
            detailsTitleImage.src = finalLogoUrl;
            detailsTitleImage.alt = `${title} Logo`;
            detailsTitleImage.style.display = 'block';
            detailsTitle.style.display = 'none'; // Hide text title if logo is shown
        } else {
             detailsTitle.style.display = 'block'; // Ensure text title is visible if no logo
             detailsTitleImage.style.display = 'none';
        }

        // Play Button
        if (detailsPlayButton._listener) {
            detailsPlayButton.removeEventListener('click', detailsPlayButton._listener);
            detailsPlayButton._listener = null;
        }
        if (item.custom_link) {
             detailsPlayButton.style.display = 'inline-block';
             detailsPlayButton._listener = (e) => {
                 const fullLink = new URL(item.custom_link, window.location.href).href;
                 copyToClipboard(fullLink, e.target);
             };
             detailsPlayButton.addEventListener('click', detailsPlayButton._listener);
        } else {
             detailsPlayButton.style.display = 'none';
        }


        // Metadata
        detailsRating.textContent = item.vote_average ? `${item.vote_average.toFixed(1)} Rating` : 'Rating N/A';
        detailsYear.textContent = year;
        // Use genres array directly from the fetched details
        detailsGenres.textContent = item.genres?.map(g => g.name).filter(Boolean).join(', ') || 'Genres N/A';

        // Description
        detailsDescription.textContent = item.overview;

        // --- Show Modal & Dim Background ---
        movieDetails.style.display = 'block';
        bodyElement.classList.add('modal-open'); // Add class to body
        if (modalInfoContent) modalInfoContent.scrollTop = 0;
    }

    function hideMovieDetails() {
        movieDetails.style.display = 'none';
        detailsTrailer.src = '';
        detailsTitleImage.src = '';
        bodyElement.classList.remove('modal-open'); // Remove class from body
         if (detailsPlayButton._listener) {
            detailsPlayButton.removeEventListener('click', detailsPlayButton._listener);
            detailsPlayButton._listener = null;
        }
    }

    // --- UI Population Functions ---

    function createItemPosterElement(item) {
        const posterContainer = document.createElement('div');
        posterContainer.classList.add('movie-poster');

        const img = document.createElement('img');
        const posterUrl = getImageUrl(item.poster_path, posterSize);
        if (posterUrl) {
            img.src = posterUrl;
            img.alt = `${item.title || item.name} Poster`;
            img.loading = 'lazy';
            posterContainer.appendChild(img);
        } else {
            // Optional: Handle missing poster - maybe add text or different style
            posterContainer.classList.add('no-poster'); // Add class for styling
            posterContainer.textContent = item.title || item.name || 'N/A'; // Show title if no image
        }

        posterContainer.addEventListener('click', () => {
             showMovieDetails(item);
        });

        return posterContainer;
    }

    // --- New function to create a row for locally defined items ---
    function createLocalItemsRow(title, items, container) {
        if (!items || items.length === 0) return; // Don't create row if no items

        const section = document.createElement('div');
        section.classList.add('genre-section'); // Reuse existing class for styling

        const titleEl = document.createElement('h2');
        titleEl.classList.add('genre-title');
        titleEl.textContent = title;
        section.appendChild(titleEl);

        const rowContainer = document.createElement('div');
        rowContainer.classList.add('movie-row-container'); // Reuse class

        const movieRow = document.createElement('div');
        movieRow.classList.add('movie-row'); // Reuse class
        rowContainer.appendChild(movieRow);

        const leftArrow = document.createElement('button');
        leftArrow.classList.add('arrow', 'left-arrow');
        leftArrow.innerHTML = '<';
        rowContainer.appendChild(leftArrow);

        const rightArrow = document.createElement('button');
        rightArrow.classList.add('arrow', 'right-arrow');
        rightArrow.innerHTML = '>';
        rowContainer.appendChild(rightArrow);

        section.appendChild(rowContainer);

        items.forEach(item => {
            const posterElement = createItemPosterElement(item); // Use the existing poster function
            movieRow.appendChild(posterElement);
        });

        setupScrolling(movieRow, leftArrow, rightArrow); // Reuse scrolling logic

        container.appendChild(section); // Append to the main page container
    }


    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    function setupScrolling(row, leftArrow, rightArrow) {
        if (!row || !leftArrow || !rightArrow) return;

        const scrollAmount = () => row.clientWidth * 0.7;

        const updateArrowsVisibility = () => {
             if (!row || !leftArrow || !rightArrow) return;
            const currentScroll = Math.round(row.scrollLeft);
            const maxScroll = Math.round(row.scrollWidth - row.clientWidth);
            const tolerance = 10;

            const canScrollLeft = currentScroll > tolerance;
            const canScrollRight = currentScroll < maxScroll - tolerance;

            leftArrow.style.opacity = canScrollLeft ? '1' : '0';
            leftArrow.style.pointerEvents = canScrollLeft ? 'auto' : 'none';
            rightArrow.style.opacity = canScrollRight ? '1' : '0';
            rightArrow.style.pointerEvents = canScrollRight ? 'auto' : 'none';
        };

        const debouncedUpdateArrows = debounce(updateArrowsVisibility, 100);

        leftArrow.addEventListener('click', () => {
            row.scrollBy({ left: -scrollAmount(), behavior: 'smooth' });
        });

        rightArrow.addEventListener('click', () => {
            row.scrollBy({ left: scrollAmount(), behavior: 'smooth' });
        });

        row.addEventListener('scroll', debouncedUpdateArrows);

        if ('ResizeObserver' in window) {
            new ResizeObserver(debouncedUpdateArrows).observe(row);
            if(row.parentElement) new ResizeObserver(debouncedUpdateArrows).observe(row.parentElement);
        } else {
            window.addEventListener('resize', debouncedUpdateArrows);
        }

        requestAnimationFrame(() => {
            setTimeout(updateArrowsVisibility, 250);
        });
        window.addEventListener('load', () => setTimeout(updateArrowsVisibility, 300));
    } // <-- Add missing closing brace for setupScrolling here

    // --- Main Population Logic ---
    function populatePageContent() { // No longer async
        if (!pageContainer) {
            console.error("Page container not found!");
            return;
        }
        pageContainer.innerHTML = ''; // Clear any previous content

        const isMoviesPage = window.location.pathname.endsWith('/') || window.location.pathname.endsWith('index.html');
        const isShowsPage = window.location.pathname.endsWith('shows.html');

        let data = [];
        let pageTitle = "";

        if (isMoviesPage) {
            // Use the globally defined moviesData (prepended by build script)
            if (typeof moviesData !== 'undefined') {
                data = moviesData;
                pageTitle = "My Movies";
                console.log("Using embedded moviesData:", data.length, "entries");
            } else {
                 console.error("moviesData is not defined. Build script might not have run correctly.");
                 pageContainer.innerHTML = `<h2>Error: Movie data not found.</h2>`;
                 if (featuredCarousel) featuredCarousel.style.display = 'none';
                 return;
            }
        } else if (isShowsPage) {
            // Use the globally defined showsData (prepended by build script)
             if (typeof showsData !== 'undefined') {
                data = showsData;
                pageTitle = "My TV Shows";
                console.log("Using embedded showsData:", data.length, "entries");
            } else {
                 console.error("showsData is not defined. Build script might not have run correctly.");
                 pageContainer.innerHTML = `<h2>Error: Show data not found.</h2>`;
                 return; // No carousel on shows page anyway
            }
             if (featuredCarousel) featuredCarousel.style.display = 'none'; // No carousel on shows page
        } else {
            pageContainer.innerHTML = '<h2>Unsupported page.</h2>';
             if (featuredCarousel) featuredCarousel.style.display = 'none';
            return;
        }

        // Populate content using the data array
        if (data && data.length > 0) {
            createLocalItemsRow(pageTitle, data, pageContainer);
            if (isMoviesPage) {
                setupFeaturedCarousel(data); // Setup carousel only on movies page
            }
        } else {
            pageContainer.innerHTML = `<h2>No ${isMoviesPage ? 'movies' : 'shows'} found in embedded data.</h2>`;
             if (isMoviesPage && featuredCarousel) featuredCarousel.style.display = 'none';
        }
    }


    // --- Modified Featured Carousel Setup ---
    // Takes the pre-built movies array as input
    function setupFeaturedCarousel(movies) {
         if (!featuredCarousel || !featuredItemsContainer || !movies || movies.length === 0) {
            if (featuredCarousel) featuredCarousel.style.display = 'none';
            console.log("Featured carousel setup skipped: No container or no movies.");
            return;
        }

        // Select up to 7 random movies for the carousel
        const featuredItemsData = [...movies].sort(() => 0.5 - Math.random()).slice(0, 7);

        if (featuredItemsData.length === 0) {
            featuredCarousel.style.display = 'none';
            return;
        }
         featuredCarousel.style.display = 'block'; // Ensure it's visible
        featuredItemsContainer.innerHTML = ''; // Clear previous items
        currentFeaturedIndex = 0; // Reset index

        featuredItemsData.forEach((item, index) => {
            const bannerItem = document.createElement('div');
            bannerItem.classList.add('featured-item');
            if (index === 0) bannerItem.classList.add('active');

            const title = item.title || item.name; // Should be movie title
            const rating = item.vote_average ? item.vote_average.toFixed(1) : 'N/A';

            // Determine title display (logo or text)
            let titleDisplay = `<h2>${title}</h2>`;
            let finalLogoUrl = null;
             if (item.title_image_url) { // Use the pre-merged title_image_url
                 if (item.title_image_url.startsWith('http')) {
                     finalLogoUrl = item.title_image_url;
                 } else {
                     finalLogoUrl = getImageUrl(item.title_image_url, titleImageSize);
                 }
            }
            if (finalLogoUrl) {
                 titleDisplay = `<img src="${finalLogoUrl}" alt="${title} Logo" class="featured-title-image">`;
            }

            const backdropUrl = getImageUrl(item.backdrop_path, backdropSize); // Construct backdrop URL

            bannerItem.innerHTML = `
                ${backdropUrl ? `<img src="${backdropUrl}" alt="${title} Banner" class="featured-backdrop" loading="lazy">` : '<div class="featured-backdrop-placeholder"></div>'}
                <div class="featured-info">
                    ${titleDisplay}
                    <p class="featured-rating">Rating: ${rating} / 10</p>
                    <p class="featured-overview">${item.overview || 'No description available.'}</p>
                    <button class="play-button-banner" data-item-id="${item.id}">ℹ️ More Info</button>
                 </div>
            `;
            // Add background only if backdrop exists
             if (backdropUrl) {
                 bannerItem.querySelector('.featured-backdrop').addEventListener('load', () => {
                     bannerItem.style.setProperty('--backdrop-url', `url(${backdropUrl})`);
                 });
             } else {
                  bannerItem.style.setProperty('--backdrop-url', 'none'); // Or a default gradient/color
                  bannerItem.style.backgroundColor = '#222'; // Fallback background
             }

            featuredItemsContainer.appendChild(bannerItem);

            // Attach listener to the button to show details modal
            bannerItem.querySelector('.play-button-banner').addEventListener('click', (e) => {
                e.stopPropagation(); // Prevent clicks bubbling up if needed
                const itemId = e.target.dataset.itemId;
                // Find the full item details from the original movies array
                const clickedItem = movies.find(i => i.id == itemId);
                if (clickedItem) {
                    showMovieDetails(clickedItem); // Show the modal
                } else {
                    console.error("Could not find movie details for banner item ID:", itemId);
                }
            });
        });

        // --- Carousel Animation ---
        const items = featuredItemsContainer.querySelectorAll('.featured-item');
        if (items.length > 1) {
            // Clear existing interval if any (important for potential re-runs)
            if (window.featuredCarouselInterval) {
                clearInterval(window.featuredCarouselInterval);
            }
            // Store interval ID globally to manage it
            window.featuredCarouselInterval = setInterval(() => {
                if (document.hidden) return; // Don't cycle if tab is not visible
                if (items.length > 0 && items[currentFeaturedIndex]) {
                     items[currentFeaturedIndex].classList.remove('active');
                     currentFeaturedIndex = (currentFeaturedIndex + 1) % items.length;
                     items[currentFeaturedIndex].classList.add('active');
                } else {
                     // Safety check in case items somehow become empty
                     clearInterval(window.featuredCarouselInterval);
                }

            }, 7000); // Change slide every 7 seconds
        }
    }


    // --- Initial Setup ---
    // Replace old setup calls with the new main function
    populatePageContent(); // This now handles fetching and populating based on page


    // --- Event Listeners (Keep existing modal and search listeners) ---
    closeDetailsButton.addEventListener('click', hideMovieDetails);
    // Changed modal click listener to only close if clicking the main modal overlay
    movieDetails.addEventListener('click', (event) => {
        if (event.target === movieDetails) { // Check if the click is directly on the modal background
            hideMovieDetails();
        }
    });


    const searchButton = document.getElementById('search-button');
    const searchInput = document.getElementById('search-input');
    if (searchButton && searchInput) {
        searchButton.addEventListener('click', () => {
            const query = searchInput.value.trim();
            if (query) {
                alert(`Search functionality not fully implemented. Query: ${query}`);
            }
        });
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                searchButton.click();
            }
        });
    }

});
